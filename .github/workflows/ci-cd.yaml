name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

permissions:
  contents: read
  id-token: write

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
    - id: checkout
      uses: actions/checkout@722adc63f1aa60a57ec37892e133b1d319cae598
      # SECURITY ISSUE: Not pinning action version with SHA
      # Pinned to commit SHA per requirement
    
    - id: setup_python
      name: Set up Python
      uses: actions/setup-python@e9aba2c848f5ebd159c070c61ea2c4e2b122355e
      # SECURITY ISSUE: Not pinning action version with SHA
      # Pinned to commit SHA per requirement
      with:
        python-version: '3.9'
    
    - id: install_deps
      name: Install dependencies
      if: ${{ always() && steps.setup_python.conclusion == 'success' }}
      run: |
        python -m pip install --upgrade pip
        if [ -f app/requirements.txt ]; then pip install -r app/requirements.txt; fi

    - id: run_tests
      name: Run tests
      if: ${{ always() && steps.install_deps.conclusion == 'success' }}
      run: |
        pip install pytest
        pytest app/
    
    # SECURITY ISSUE: No SAST scan
    # Running security tests
    - id: sast
      name: SAST scan (Bandit)
      if: ${{ always() && steps.install_deps.conclusion == 'success' }}
      run: |
        pip install bandit
        bandit -r app -ll

    # SECURITY ISSUE: No dependency scanning
    # Dependency Scanning
    - id: safety
      name: Dependency scan (Safety)
      if: ${{ always() && steps.install_deps.conclusion == 'success' }}
      run: |
        pip install safety
        if [ -f app/requirements.txt ]; then safety check -r app/requirements.txt --full-report; else echo "No requirements.txt found"; fi

    # SECURITY ISSUE: No secrets scanning
    # Secrets Scanning
    - id: gitleaks
      name: Secrets scan (Gitleaks)
      if: ${{ always() && steps.checkout.conclusion == 'success' }}
      run: |
        GITLEAKS_VERSION=8.18.4
        curl -sSL https://github.com/gitleaks/gitleaks/releases/download/v${GITLEAKS_VERSION}/gitleaks_${GITLEAKS_VERSION}_linux_x64.tar.gz -o gitleaks.tar.gz
        tar -xzf gitleaks.tar.gz gitleaks
        chmod +x gitleaks
        ./gitleaks detect -v --redact --exit-code 1
    
    - id: docker_build
      name: Build Docker image
      if: ${{ always() && steps.checkout.conclusion == 'success' }}
      run: |
        docker build -t user-management:${{ github.sha }} app/

    # SECURITY ISSUE: Not scanning the Docker image for vulnerabilities
    # Container Image Scanning
    - id: trivy
      name: Container scan (Trivy)
      if: ${{ always() && steps.docker_build.conclusion == 'success' }}
      run: |
        curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh -s -- -b /usr/local/bin
        trivy image --exit-code 1 --severity HIGH,CRITICAL --no-progress user-management:${{ github.sha }}
    
    # IaC Scanning
    - id: checkov
      name: IaC scan (Checkov)
      if: ${{ always() && steps.install_deps.conclusion == 'success' }}
      run: |
        pip install checkov
        checkov -d infra --framework terraform,kubernetes
    
    
    - id: configure_aws
      name: Configure AWS credentials (OIDC)
      if: always()
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
        aws-region: us-west-2
    
    - id: login_ecr
      name: Login to Amazon ECR
      if: ${{ always() && steps.configure_aws.conclusion == 'success' }}
      uses: aws-actions/amazon-ecr-login@v1
    
    - name: Push image to Amazon ECR
      if: ${{ always() && steps.login_ecr.conclusion == 'success' && steps.docker_build.conclusion == 'success' }}
      env:
        ECR_REGISTRY: ${{ steps.login_ecr.outputs.registry }}
        ECR_REPOSITORY: user-management
      run: |
        docker tag user-management:${{ github.sha }} $ECR_REGISTRY/$ECR_REPOSITORY:${{ github.sha }}
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:${{ github.sha }}
        # SECURITY ISSUE: Pushing latest tag (removed)

  deploy:
    needs: build
    if: always()
    runs-on: ubuntu-latest
    # SECURITY ISSUE: No environment-specific deployment
    # SECURITY ISSUE: No approval gate for production deployment
    environment: production
    
    steps:
    - id: deploy_checkout
      uses: actions/checkout@v2
      if: always()
    
    - id: deploy_configure_aws
      name: Configure AWS credentials (OIDC)
      if: ${{ always() && steps.deploy_checkout.conclusion == 'success' }}
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
        aws-region: us-west-2
    
    - id: update_kubeconfig
      name: Update kubeconfig
      if: ${{ always() && steps.deploy_configure_aws.conclusion == 'success' }}
      run: |
        aws eks update-kubeconfig --name my-cluster --region us-west-2
    
    # SECURITY ISSUE: No validation of Kubernetes manifests
    # Validation of Kubernetes manifests
    - id: validate_manifests
      name: Validate Kubernetes manifests (server-side dry-run)
      if: ${{ always() && steps.update_kubeconfig.conclusion == 'success' }}
      run: |
        kubectl apply --dry-run=server -f infra/deployment.yaml
    
    - id: deploy_kubernetes
      name: Deploy to Kubernetes
      if: ${{ always() && steps.update_kubeconfig.conclusion == 'success' }}
      run: |
        kubectl apply -f infra/deployment.yaml
        # SECURITY ISSUE: No rollback strategy
        # SECURITY ISSUE: No verification of deployment health
        # Verify rollout and rollback on failure
        if ! kubectl rollout status deployment/app-deployment --timeout=120s; then
          echo "Deployment rollout failed, performing rollback"
          kubectl rollout undo deployment/app-deployment || true
          exit 1
        fi
    
    # SECURITY ISSUE: No DAST scanning post-deployment
    # DAST Scanning
    - name: DAST scan (OWASP ZAP baseline)
      env:
        TARGET_URL: ${{ secrets.DAST_TARGET_URL }}
      if: always()
      run: |
        if [ -z "$TARGET_URL" ]; then echo "Skipping DAST: DAST_TARGET_URL not set"; exit 0; fi
        docker run --rm -t owasp/zap2docker-stable zap-baseline.py -t "$TARGET_URL" -r zap-baseline.html -m 5 -I || true
    
    - name: Upload ZAP report
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: zap-baseline-report
        path: zap-baseline.html

    # SECURITY ISSUE: No compliance validation
    # Compliance Validation
    - name: Compliance validation
      if: always()
      run: |
        python3 -m pip install --user pyyaml
        python3 security/compliance_check.py --k8s-namespace default --terraform-dir infra --dockerfile app/Dockerfile --output text > compliance.txt
        if grep -q "Total Issues: 0" compliance.txt; then echo "Compliance passed"; else echo "Compliance violations found"; exit 1; fi

    - name: Upload compliance report
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: compliance-report
        path: compliance.txt
